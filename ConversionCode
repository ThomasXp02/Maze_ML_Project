import pybullet as p
import time
import pybullet_data
import math

# Connect to PyBullet GUI
p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())  # Load PyBullet data files
p.setGravity(0, 0, -9.8)  # Apply gravity

# Define the size of the floor (black)
floor_size = 50  # Half extents of the floor in meters

# Create a collision shape for the floor
floor_collision_shape = p.createCollisionShape(
    shapeType=p.GEOM_BOX,
    halfExtents=[floor_size, floor_size, 0.1]  # Length, width, and height
)

# Create a visual shape for the floor (black color)
floor_visual_shape = p.createVisualShape(
    shapeType=p.GEOM_BOX,
    halfExtents=[floor_size, floor_size, 0.1],
    rgbaColor=(0.5, 0.5, 0.5, 1)  # Gray
)

# Combine collision and visual shapes into a floor body
floor_id = p.createMultiBody(
    baseCollisionShapeIndex=floor_collision_shape,
    baseVisualShapeIndex=floor_visual_shape,
    basePosition=[0, 0, 0]  # Position of the floor
)

# Wall thickness (height from the ground)
wall_thickness = 0.5  # Z dimension of the wall (height above ground)

# Function to create a wall between two points (x1, y1) and (x2, y2)
def create_wall_segment(x1, y1, x2, y2, color=(0.6, 0.3, 0.0, 1)): # Brown Walls
    # Calculate the wall's center position
    center_x = (x1 + x2) / 2
    center_y = (y1 + y2) / 2
    center_z = wall_thickness / 2  # Raise the wall above the ground

    # Calculate the wall's length and orientation
    length = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    orientation = math.atan2(y2 - y1, x2 - x1)  # Angle in radians

    # Define the collision shape (box with specified half extents)
    collision_shape = p.createCollisionShape(
        p.GEOM_BOX,
        halfExtents=[length / 2, wall_thickness / 2, wall_thickness / 2]
    )

    # Define the visual shape (box with brown color)
    visual_shape = p.createVisualShape(
        p.GEOM_BOX,
        halfExtents=[length / 2, wall_thickness / 2, wall_thickness / 2],
        rgbaColor=color
    )

    # Create the wall and apply rotation
    p.createMultiBody(
        baseCollisionShapeIndex=collision_shape,
        baseVisualShapeIndex=visual_shape,
        basePosition=[center_x, center_y, center_z],  # Center position
        baseOrientation=p.getQuaternionFromEuler([0, 0, orientation])  # Rotation
    )

# Example maze: list of wall segments defined by (x1, y1, x2, y2); will need to be intergrated into Thom's code
maze_walls = [
    (0, 0, 10, 0),  # Horizontal wall from start
    (0, 0, 0, 10),  # Vertical wall from start
    (10, 0, 10, 10),  # Vertical wall
    (0, 10, 10, 10),  # Horizontal wall
    (2, 2, 8, 2),  # Internal horizontal wall
    (8, 2, 8, 8),  # Internal vertical wall
]

# Create walls with a brown color
for wall in maze_walls:
    create_wall_segment(*wall)

# Position the camera to view the maze from above
p.resetDebugVisualizerCamera(
    cameraDistance=15,  # Distance from the maze
    cameraYaw=0,        # Yaw angle (rotation around Z-axis)
    cameraPitch=-90,    # Pitch angle (looking straight down)
    cameraTargetPosition=[5, 5, 0]  # Target the maze center
)

# Simulation loop
while True:
    p.stepSimulation()  # Step the physics simulation
    time.sleep(1. / 240.)  # Simulate at 240 Hz
